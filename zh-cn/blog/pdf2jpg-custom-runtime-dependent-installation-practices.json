{
  "filename": "pdf2jpg-custom-runtime-dependent-installation-practices.md",
  "__html": "<h1 id=\"serverless-devs%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E4%BA%8E-ghostscript-%E7%9A%84-pdf-%E8%BD%AC-jpg\">Serverless-Devs实践-基于 GhostScript 的 PDF 转 JPG <a class=\"header-anchor\" href=\"#serverless-devs%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E4%BA%8E-ghostscript-%E7%9A%84-pdf-%E8%BD%AC-jpg\">#</a></h1>\n<p>该项目是基于GhostScript的PDF转JPG工具，借助<a href=\"https://github.com/Serverless-Devs/Serverless-Devs/blob/master/readme_zh.md\">Serverless-Devs</a>工具进行依赖安装并部署到阿里云函数计算，是一个serverless的简单示例。</p>\n<h2 id=\"%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D\">开始之前 <a class=\"header-anchor\" href=\"#%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D\">#</a></h2>\n<h3 id=\"serverless-devs\">Serverless-Devs <a class=\"header-anchor\" href=\"#serverless-devs\">#</a></h3>\n<p>如果您的开发环境没有Serverless-Devs，如果您的开发环境具备<a href=\"https://www.npmjs.com/\">npm</a>，可执行以下命令进行安装：</p>\n<pre><code class=\"language-bash\">npm install  @serverless-devs/s -g\n</code></pre>\n<p>或者 通过 <a href=\"https://yarnpkg.com/\">yarn</a> 进行安装</p>\n<pre><code class=\"language-bash\">yarn global add  @serverless-devs/s\n</code></pre>\n<p>更多内容请参考<a href=\"https://github.com/devsapp/fc/blob/main/docs/Getting-started/Install-tutorial.md\">Serverless Devs Install-tutorial</a>。</p>\n<h3 id=\"docker\">Docker <a class=\"header-anchor\" href=\"#docker\">#</a></h3>\n<p>本文档涉及本地调试，因此需要开发环境具有<a href=\"https://www.docker.com/\">Docker</a>，您可根据您开发平台的不同安装不同版本，可参考<a href=\"https://github.com/devsapp/fc/blob/main/docs/Getting-started/Install-tutorial.md\">Serverless Devs Install-tutorial</a>可选部分。</p>\n<h3 id=\"aliyun-ram%E8%B4%A6%E5%8F%B7\">Aliyun RAM账号 <a class=\"header-anchor\" href=\"#aliyun-ram%E8%B4%A6%E5%8F%B7\">#</a></h3>\n<p>前往<a href=\"https://ram.console.aliyun.com/users\">RAM 访问控制</a>创建一个子用户，赋予其管理函数计算(FC)服务权限「AliyunFCFullAccess」并创建AccessKey。</p>\n<h3 id=\"serverless-devs%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE\">Serverless-Devs密钥配置 <a class=\"header-anchor\" href=\"#serverless-devs%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE\">#</a></h3>\n<p>参考<a href=\"https://github.com/devsapp/fc/blob/main/docs/Getting-started/Setting-up-credentials.md\">配置阿里云密钥</a>及<a href=\"http://www.serverless-devs.com/docs/command#config%E6%8C%87%E4%BB%A4\">S config</a>，将上一步创建的子用户AccessKey配置到S中。</p>\n<h2 id=\"%E5%BC%80%E5%8F%91\">开发 <a class=\"header-anchor\" href=\"#%E5%BC%80%E5%8F%91\">#</a></h2>\n<h3 id=\"%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\">初始化项目 <a class=\"header-anchor\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\">#</a></h3>\n<p>执行<code>s init</code>来创建项目，我们选择<em>Alibaba Cloud Serverless ➡️ HTTP Function-Node.js 12 Example ➡️ 输入文件夹名称</em>。</p>\n<h3 id=\"%E8%87%AA%E5%AE%9A%E4%B9%89runtime\">自定义Runtime <a class=\"header-anchor\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89runtime\">#</a></h3>\n<p>创建Funfile文件：</p>\n<pre><code class=\"language-dockerfile\">RUNTIME nodejs12\t<span class=\"hljs-comment\"># 指定基础运行环境</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> fun-install apt-get install ghostscript</span>\n</code></pre>\n<p>更多关于Funfile信息请参考<a href=\"https://developer.aliyun.com/article/719100\">Funfile 功能介绍</a>及<a href=\"https://help.aliyun.com/document_detail/132044.html?spm=a2c4g.11186623.6.601.2cd369ac18G1R7\">Custom Runtime-函数计算</a>。</p>\n<h3 id=\"%E4%BF%AE%E6%94%B9index.js\">修改index.js <a class=\"header-anchor\" href=\"#%E4%BF%AE%E6%94%B9index.js\">#</a></h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">const</span> { exec } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'child_process'</span>)\n\nexports.handler = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, context, callback</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> cmd = <span class=\"hljs-string\">'gs -sDEVICE=jpeg -dTextAlphaBits=4 -r144 -o /tmp/test.jpg test.pdf'</span>\n  exec(cmd, (err, stdout, stderr) =&gt; {\n    <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"stdout =================== START\"</span>)\n      <span class=\"hljs-built_in\">console</span>.log(stdout)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"stdout =================== END\"</span>)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"stderr =================== START\"</span>)\n      <span class=\"hljs-built_in\">console</span>.log(stderr)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"stderr =================== END\"</span>)\n      callback(err, <span class=\"hljs-string\">\"convert fail.\\n\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"stdout =================== START\"</span>)\n      <span class=\"hljs-built_in\">console</span>.log(stdout)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"stdout =================== END\"</span>)\n      callback(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'convert success.\\nJPG file save to /tmp/test.jpg\\n'</span>)\n    }\n  })\n}\n</code></pre>\n<h3 id=\"%E4%BF%AE%E6%94%B9s.yaml\">修改s.yaml <a class=\"header-anchor\" href=\"#%E4%BF%AE%E6%94%B9s.yaml\">#</a></h3>\n<p>在function字段下添加环境变量</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># s.yaml</span>\n<span class=\"hljs-string\">...</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">ghostscript_example:</span> <span class=\"hljs-comment\">#  服务名称</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">devsapp/fc</span>  <span class=\"hljs-comment\"># 组件名称</span>\n    \n    <span class=\"hljs-attr\">props:</span> <span class=\"hljs-comment\">#  组件的属性值</span>\n      <span class=\"hljs-attr\">service:</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ghostscript</span>\n      <span class=\"hljs-string\">...</span>\n      <span class=\"hljs-attr\">function:</span>\n        <span class=\"hljs-string\">...</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pdf2jpg-test</span>\n        <span class=\"hljs-attr\">environmentVariables:</span>\n          <span class=\"hljs-attr\">GS_LIB:</span> <span class=\"hljs-string\">&gt;-\n        .s/root/usr/share/ghostscript/9.26/Resource/Init:.s/root/usr/share/ghostscript/9.26/lib:.s/root/usr/share/ghostscript/9.26/Resource/Font:.s/root/usr/share/ghostscript/fonts:.s/root/var/lib/ghostscript/fonts:.s/root/usr/share/ghostscript/fonts:.s/root/usr/share/fonts\n</span></code></pre>\n<h3 id=\"%E6%B7%BB%E5%8A%A0%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6\">添加测试文件 <a class=\"header-anchor\" href=\"#%E6%B7%BB%E5%8A%A0%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6\">#</a></h3>\n<p>在项目目录下添加一个名为「test.pdf」的测试文件。</p>\n<h3 id=\"%E6%9E%84%E5%BB%BAruntime%E5%B9%B6%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">构建Runtime并安装依赖 <a class=\"header-anchor\" href=\"#%E6%9E%84%E5%BB%BAruntime%E5%B9%B6%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">#</a></h3>\n<p>执行<code>s build</code>，S检测到项目中存在「Funfile」时将会以Custom Container模式构建并安装依赖，得到<code>Build artifact successfully</code>时说明构建成功。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> s build</span>\n[2021-07-27T08:31:31.428] [INFO ] [S-CLI] - Start ...\n[2021-07-27T08:31:33.142] [INFO ] [FC-BUILD] - Build artifact start...\nFunfile exist, Fun will use container to build forcely\nStep 1/2 : FROM registry.cn-beijing.aliyuncs.com/aliyunfc/runtime-nodejs12:build-1.9.17 as nodejs12\n<span class=\"hljs-meta\"> ---&gt;</span><span class=\"bash\"> 231f0fd07c07</span>\nStep 2/2 : RUN fun-install apt-get install ghostscript\n<span class=\"hljs-meta\"> ---&gt;</span><span class=\"bash\"> Using cache</span>\n<span class=\"hljs-meta\"> ---&gt;</span><span class=\"bash\"> f1fd050510fe</span>\nsha256:f1fd050510fedf0cbcb673d327c84a153d824357f77fe0f0f76e730b4bbe0a3c\nSuccessfully built f1fd050510fe\nSuccessfully tagged fun-cache-4c2c48e0-2395-45c8-a29d-2c9668b985eb:latest\ncopying function artifact to /Users/linjiaxiang/ServerlessDevs/ghostscript_example/.s/build/artifacts/ghostscript/pdf2jpg-test\n[2021-07-27T08:31:37.020] [INFO ] [FC-BUILD] - Build function using image: fun-cache-4c2c48e0-2395-45c8-a29d-2c9668b985eb\n[2021-07-27T08:31:37.033] [INFO ] [FC-BUILD] - skip pulling image fun-cache-4c2c48e0-2395-45c8-a29d-2c9668b985eb...\n[2021-07-27T08:31:38.245] [INFO ] [FC-BUILD] - Build artifact successfully.\n\nTips for next step\n======================\n* Invoke Event Function: s local invoke\n* Invoke Http Function: s local start\n* Deploy Resources: s deploy\nEnd of method: build\n</code></pre>\n<h3 id=\"%E6%9C%AC%E5%9C%B0%E8%B0%83%E7%94%A8\">本地调用 <a class=\"header-anchor\" href=\"#%E6%9C%AC%E5%9C%B0%E8%B0%83%E7%94%A8\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> s <span class=\"hljs-built_in\">local</span> invoke</span>\nFC Invoke Start RequestId: f6d78602-c84d-41f5-a8be-345825effcd7\nload code for handler:index.handler\n2021-07-27T00:33:12.019Z f6d78602-c84d-41f5-a8be-345825effcd7 [verbose] stdout =================== START\n2021-07-27T00:33:12.019Z f6d78602-c84d-41f5-a8be-345825effcd7 [verbose] GPL Ghostscript 9.26 (2018-11-20)\nCopyright (C) 2018 Artifex Software, Inc.  All rights reserved.\nThis software comes with NO WARRANTY: see the file PUBLIC for details.\nWarning: the map file cidfmap was not found.\nProcessing pages 1 through 1.\nPage 1\n\n2021-07-27T00:33:12.020Z f6d78602-c84d-41f5-a8be-345825effcd7 [verbose] stdout =================== END\nFC Invoke End RequestId: f6d78602-c84d-41f5-a8be-345825effcd7\nconvert success.\nJPG file save to /tmp/test.jpg\n</code></pre>\n<p>可以查看文件<code>.s/build/artifacts/ghostscript/pdf2jpg-test/test.jpg</code>查看效果</p>\n<h3 id=\"%E9%83%A8%E7%BD%B2\">部署 <a class=\"header-anchor\" href=\"#%E9%83%A8%E7%BD%B2\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> s deploy    </span>\n[2021-07-27T08:52:03.419] [INFO ] [S-CLI] - Start ...\n[2021-07-27T08:52:05.745] [INFO ] [FC-DEPLOY] - Using region: cn-shenzhen\n[2021-07-27T08:52:05.746] [INFO ] [FC-DEPLOY] - Using access alias: ali-main\n[2021-07-27T08:52:05.746] [INFO ] [FC-DEPLOY] - Using accessKeyID: ***********1257\n[2021-07-27T08:52:05.746] [INFO ] [FC-DEPLOY] - Using accessKeySecret: ***********eMkg\n[2021-07-27T08:52:06.188] [INFO ] [FC-DEPLOY] - Checking Service ghostscript exists\n[2021-07-27T08:52:06.695] [INFO ] [FC-DEPLOY] - Checking Function pdf2jpg-test exists\n📎 Using fc deploy type: sdk, If you want to deploy with pulumi, you can [s cli fc-default set deploy-type pulumi] to switch.\n[2021-07-27T08:52:07.710] [INFO ] [FC-DEPLOY] - Fc detects that you have run build command for function: pdf2jpg-test.\n...\n[2021-07-27T08:52:14.454] [INFO ] [FC-DEPLOY] - Creating service: ghostscript\n[2021-07-27T08:52:14.454] [INFO ] [FC-DEPLOY] - Creating function: pdf2jpg-test\n✔ Make service ghostscript success.\n✔ Make function ghostscript/pdf2jpg-test success.\n[2021-07-27T08:52:29.186] [INFO ] [FC-DEPLOY] - Checking Service ghostscript exists\n[2021-07-27T08:52:29.499] [INFO ] [FC-DEPLOY] - Checking Function pdf2jpg-test exists\n...\n</code></pre>\n<h3 id=\"%E8%B0%83%E7%94%A8\">调用 <a class=\"header-anchor\" href=\"#%E8%B0%83%E7%94%A8\">#</a></h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> s invoke</span>\n[2021-07-27T08:52:46.610] [INFO ] [S-CLI] - Start ...\n========= FC invoke Logs begin =========\nFC Invoke Start RequestId: 8b072a2e-0233-4218-b5f8-9c6385c50933\nload code for handler:index.handler\n2021-07-27T00:52:49.652Z 8b072a2e-0233-4218-b5f8-9c6385c50933 [verbose] stdout =================== START\n2021-07-27T00:52:49.652Z 8b072a2e-0233-4218-b5f8-9c6385c50933 [verbose] GPL Ghostscript 9.26 (2018-11-20)\nCopyright (C) 2018 Artifex Software, Inc.  All rights reserved.\nThis software comes with NO WARRANTY: see the file PUBLIC for details.\nWarning: the map file cidfmap was not found.\nProcessing pages 1 through 1.\nPage 1\n\n2021-07-27T00:52:49.652Z 8b072a2e-0233-4218-b5f8-9c6385c50933 [verbose] stdout =================== END\nFC Invoke End RequestId: 8b072a2e-0233-4218-b5f8-9c6385c50933\n\nDuration: 669.58 ms, Billed Duration: 670 ms, Memory Size: 128 MB, Max Memory Used: 97.57 MB\n========= FC invoke Logs end =========\n\nFC Invoke Result:\nconvert success.\nJPG file save to /tmp/test.jpg\n\nEnd of method: invoke\n</code></pre>\n<h2 id=\"%E9%99%84%E5%BD%95%E4%B8%8E%E5%8F%82%E8%80%83\">附录与参考 <a class=\"header-anchor\" href=\"#%E9%99%84%E5%BD%95%E4%B8%8E%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/JasonLamv-t/serverless-devs-ghostscript_example\">本文代码</a></li>\n<li><a href=\"https://github.com/awesome-fc/ghostscript_example\">awesome-fc/ghostscript_example: 基于 GhostScript 的 PDF 转 JPG </a></li>\n</ul>\n",
  "link": "/zh-cn/blog/pdf2jpg-custom-runtime-dependent-installation-practices.html",
  "meta": {}
}