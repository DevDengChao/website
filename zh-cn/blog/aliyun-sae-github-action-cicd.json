{
  "filename": "aliyun-sae-github-action-cicd.md",
  "__html": "<h1 id=\"serverless-devs---sae%E4%B8%8Egithub-action%E7%8F%A0%E8%81%94%E7%92%A7%E5%90%88%EF%BC%8C%E8%AE%A9cd%E4%BB%8E%E6%9C%AA%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95\">Serverless Devs - SAE与Github Action珠联璧合，让CD从未如此简单 <a class=\"header-anchor\" href=\"#serverless-devs---sae%E4%B8%8Egithub-action%E7%8F%A0%E8%81%94%E7%92%A7%E5%90%88%EF%BC%8C%E8%AE%A9cd%E4%BB%8E%E6%9C%AA%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95\">#</a></h1>\n<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"header-anchor\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>SAE是什么？在阿里云官方给的解释是：</p>\n<blockquote>\n<p>Serverless 应用引擎（简称 SAE）是首款面向应用的Serverless PaaS，提供成本更优、效率更高的一站式应用托管方案。支持Spring Cloud/Dubbo/HSF应用零改造上云，提供监控诊断、自动构建镜像、Java全链路加速、多发布策略、秒级自动弹性等能力，支持Jenkins/云效/插件等部署应用，还能通过Docker镜像部署任何语言的应用。</p>\n</blockquote>\n<p>由此可见，SAE实际上是Serverless架构的另一种形态。他将会对镜像，Java等项目有着更好的支持。但是可惜的是，在SAE的官方文档中，最佳实践中，并没有看到与Github Action结合进行自动化发布等相关的描述：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125149901-6447a080-e16e-11eb-9e19-9429a2d3b857.png\" alt=\"image\"></p>\n<p>Github Action这么有趣，怎么可以少的了Github Action的案例呢？所以本文将会是首个，基于Serverless Devs，并且让SAE和Github Action有机结合的实战案例。</p>\n<p>整个案例分为几个部分：</p>\n<ul>\n<li>Github操作\n<ul>\n<li>创建Github仓库</li>\n<li>配置密钥等信息</li>\n</ul>\n</li>\n<li>本地创建应用\n<ul>\n<li>创建一个应用</li>\n<li>编写Dockerfile</li>\n<li>编写s.yaml（用Serverless Devs进行托管）</li>\n<li>编写action所必须的Yaml</li>\n</ul>\n</li>\n<li>启动🚀\n<ul>\n<li>将代码推动到Github，触发CD流程，进行自动化部署</li>\n</ul>\n</li>\n</ul>\n<p>关于<code>编写action所必须的Yaml</code>，主要包括了几个流程：</p>\n<ul>\n<li>登陆阿里云ACR</li>\n<li>Docker Build</li>\n<li>Docker Push</li>\n<li>设置Push后的镜像地址到环境变量</li>\n<li>安装Serverless Devs</li>\n<li>配置Serverless Devs密钥信息</li>\n<li>启动部署操作🚀</li>\n</ul>\n<h2 id=\"github-%E6%93%8D%E4%BD%9C\">Github 操作 <a class=\"header-anchor\" href=\"#github-%E6%93%8D%E4%BD%9C\">#</a></h2>\n<p>首先进行仓库的创建：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125150349-bdfd9a00-e171-11eb-9a0a-3ec2cb4faeea.png\" alt=\"image\"></p>\n<p>例如，我创建的仓库就是：<a href=\"https://github.com/anycodes/SAE-Container-Action-Demo\">https://github.com/anycodes/SAE-Container-Action-Demo</a></p>\n<p>创建完仓库开始进行密钥的配置，可以参考文档：<a href=\"http://www.serverless-devs.com/blog/serverless-devs-ci-cd-github-action-usage#%E8%B4%A6%E5%8F%B7%E4%BF%A1%E6%81%AF%E9%85%8D%E7%BD%AE\">http://www.serverless-devs.com/blog/serverless-devs-ci-cd-github-action-usage#账号信息配置</a></p>\n<p>主要就是在Settings-&gt;Secrets中进行信息配置：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125148905-234c8d80-e168-11eb-867a-c1dee860e932.png\" alt=\"image\"></p>\n<p>配置完成：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125148932-598a0d00-e168-11eb-930e-e78484142588.png\" alt=\"image\"></p>\n<h2 id=\"%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8\">本地创建应用 <a class=\"header-anchor\" href=\"#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8\">#</a></h2>\n<p>由于本次实践，主要是看Build，Push镜像之后，部署到SAE，所以我就在本地随便准备了一个代码，仅供测试使用：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125150278-344dcc80-e171-11eb-872f-f9b976bd62dd.png\" alt=\"image\"></p>\n<p>完成之后，我们针对这个项目，象征性编写一个Dockerfile：</p>\n<pre><code>FROM node:14.5.0-alpine3.11\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm install\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 8080\nENTRYPOINT [ &quot;node&quot;, &quot;server.js&quot; ]\n</code></pre>\n<p>编写完成之后，我们再根据SAE组件（可以参考 <a href=\"https://github.com/devsapp/sae\">https://github.com/devsapp/sae</a> ），编写一个s.yaml:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">edition:</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span>          <span class=\"hljs-comment\">#  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sae-app</span>           <span class=\"hljs-comment\">#  项目名称</span>\n<span class=\"hljs-attr\">access:</span> <span class=\"hljs-string\">publish_access</span>  <span class=\"hljs-comment\">#  秘钥别名</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">sae-test:</span> <span class=\"hljs-comment\">#  服务名称</span>\n    <span class=\"hljs-attr\">component:</span>  <span class=\"hljs-string\">devsapp/sae</span>\n    <span class=\"hljs-attr\">props:</span>\n      <span class=\"hljs-attr\">Region:</span> <span class=\"hljs-string\">cn-beijing</span>\n      <span class=\"hljs-attr\">Namespace:</span>\n        <span class=\"hljs-attr\">NamespaceId:</span> <span class=\"hljs-string\">cn-beijing:test</span>\n        <span class=\"hljs-attr\">NamespaceName:</span> <span class=\"hljs-string\">serverless-devs</span>\n        <span class=\"hljs-attr\">NamespaceDescription:</span> <span class=\"hljs-string\">namespace</span> <span class=\"hljs-string\">desc</span>\n      <span class=\"hljs-attr\">Application:</span>\n        <span class=\"hljs-attr\">AppName:</span> <span class=\"hljs-string\">serverless-devs-app</span>\n        <span class=\"hljs-attr\">AppDescription:</span> <span class=\"hljs-string\">This</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">description.</span>\n        <span class=\"hljs-attr\">Code:</span>\n          <span class=\"hljs-attr\">Image:</span> <span class=\"hljs-string\">${env(DOCKER_IMAGE)}</span>\n        <span class=\"hljs-attr\">Cpu:</span> <span class=\"hljs-number\">500</span>\n        <span class=\"hljs-attr\">Memory:</span> <span class=\"hljs-number\">1024</span>\n        <span class=\"hljs-attr\">Replicas:</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-attr\">AutoConfig:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">SLB:</span>\n        <span class=\"hljs-attr\">Internet:</span> <span class=\"hljs-string\">[{\"port\":80,\"targetPort\":8080,\"protocol\":\"TCP\"}]</span>\n\n</code></pre>\n<p>这里面有一个叫做Image的字段，他是容器镜像的地址，此时使用的是一个环境变量作为引入，也就是说，之后在Github Action实例中，推送镜像之后，将结果打入ENV即可读取到。</p>\n<p>关于这种方法的妙用还有很多：</p>\n<p>例如，当我们需要配置一下密钥信息等，是不是也可以通过这种方法，将密钥放入环境变量，然后在Yaml中直接引用？</p>\n<p>接下来还需要编写一个Github Action相关的Yaml：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">SAE</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span> <span class=\"hljs-string\">[</span> <span class=\"hljs-string\">master</span> <span class=\"hljs-string\">]</span>\n    \n<span class=\"hljs-comment\"># Environment variables available to all jobs and steps in this workflow.</span>\n<span class=\"hljs-attr\">env:</span>\n  <span class=\"hljs-attr\">REGION_ID:</span> <span class=\"hljs-string\">cn-beijing</span>\n  <span class=\"hljs-attr\">REGISTRY:</span> <span class=\"hljs-string\">registry.cn-beijing.aliyuncs.com</span>\n  <span class=\"hljs-attr\">NAMESPACE:</span> <span class=\"hljs-string\">custom-container</span>\n  <span class=\"hljs-attr\">IMAGE:</span> <span class=\"hljs-string\">sae</span>\n  <span class=\"hljs-attr\">TAG:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">github.sha</span> <span class=\"hljs-string\">}}</span>\n\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">environment:</span> <span class=\"hljs-string\">production</span>\n\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n\n      <span class=\"hljs-comment\"># 1.1 Login to ACR</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Login</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">ACR</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">the</span> <span class=\"hljs-string\">AccessKey</span> <span class=\"hljs-string\">pair</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">aliyun/acr-login@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">region-id:</span> <span class=\"hljs-string\">\"$<span class=\"hljs-template-variable\">{{ env.REGION_ID }}</span>\"</span>\n          <span class=\"hljs-attr\">access-key-id:</span> <span class=\"hljs-string\">\"$<span class=\"hljs-template-variable\">{{ secrets.ACCESS_KEY_ID }}</span>\"</span>\n          <span class=\"hljs-attr\">access-key-secret:</span> <span class=\"hljs-string\">\"$<span class=\"hljs-template-variable\">{{ secrets.ACCESS_KEY_SECRET }}</span>\"</span>\n\n      <span class=\"hljs-comment\"># 1.2 Buid and push image to ACR</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">push</span> <span class=\"hljs-string\">image</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">ACR</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|\n          docker build --tag \"$REGISTRY/$NAMESPACE/$IMAGE:$TAG\" .\n          docker push \"$REGISTRY/$NAMESPACE/$IMAGE:$TAG\"\n</span>      <span class=\"hljs-comment\"># 1.3 et Docker Image to Env</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Set</span> <span class=\"hljs-string\">Docker</span> <span class=\"hljs-string\">Image</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">Env</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">\"DOCKER_IMAGE=$REGISTRY/$NAMESPACE/$IMAGE:$TAG\"</span> <span class=\"hljs-string\">&gt;&gt;</span> <span class=\"hljs-string\">$GITHUB_ENV</span>\n\n\n      <span class=\"hljs-comment\"># 2.1 Install Serverless Devs</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">Serverless</span> <span class=\"hljs-string\">Devs</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-number\">12</span>\n          <span class=\"hljs-attr\">registry-url:</span> <span class=\"hljs-string\">https://registry.npmjs.org/</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">-g</span> <span class=\"hljs-string\">@serverless-devs/s</span>\n\n\n      <span class=\"hljs-comment\"># 2.2 Config Serverless Devs</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Config</span> <span class=\"hljs-string\">Serverless</span> <span class=\"hljs-string\">Devs</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">add</span> <span class=\"hljs-string\">--AccountID</span> <span class=\"hljs-string\">${{secrets.Account_ID}}</span> <span class=\"hljs-string\">--AccessKeyID</span> <span class=\"hljs-string\">${{secrets.ACCESS_KEY_ID}}</span> <span class=\"hljs-string\">--AccessKeySecret</span> <span class=\"hljs-string\">${{secrets.ACCESS_KEY_SECRET}}</span> <span class=\"hljs-string\">-a</span> <span class=\"hljs-string\">publish_access</span>\n\n      <span class=\"hljs-comment\"># 2.3 Deploy to SAE</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">SAE</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">deploy</span>\n</code></pre>\n<p>至此，我们完整了所有的基础准备。</p>\n<p>在上面的Yaml中，每一个过程都有注释，整体来说，下载Serverless Devs，到部署项目，其实只有3条命令：</p>\n<pre><code>npm install -g @serverless-devs/s\ns config add --AccountID ${{secrets.Account_ID}} --AccessKeyID ${{secrets.ACCESS_KEY_ID}} --AccessKeySecret ${{secrets.ACCESS_KEY_SECRET}} -a publish_access\ns deploy\n</code></pre>\n<p>这里要注意，s.yaml中指定的密钥要和我们创建（<code>s config add</code>）时的密钥保持一致。</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125150572-4fb9d700-e173-11eb-8bab-876b1e98f96a.png\" alt=\"image\"></p>\n<h2 id=\"%E5%90%AF%E5%8A%A8%F0%9F%9A%80\">启动🚀 <a class=\"header-anchor\" href=\"#%E5%90%AF%E5%8A%A8%F0%9F%9A%80\">#</a></h2>\n<p>完成之后我们将代码推动到Github：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125148956-8807e800-e168-11eb-866a-12493d0d8901.png\" alt=\"image\"></p>\n<p>推送完成，可以看到线上的代码已经更新，并触发了CD流程：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125149049-25631c00-e169-11eb-8181-3e03db5a6d7f.png\" alt=\"image\"></p>\n<p>此时，我们可以移步到SAE控制台（ <a href=\"https://sae.console.aliyun.com/\">https://sae.console.aliyun.com/</a> ）：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125149755-5b0a0400-e16d-11eb-9c43-d3b1996e5a5c.png\" alt=\"image\"></p>\n<p>此时正在创建/更新应用</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125149764-6a894d00-e16d-11eb-9b62-804df63274c5.png\" alt=\"image\"></p>\n<p>稍等片刻，即在进行SLB等相关的绑定。再稍等片刻，即可看到Github这头的Action已经完成：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125149797-a6bcad80-e16d-11eb-84b6-51ad9c52d935.png\" alt=\"image\"></p>\n<p>此时，我们在看SAE控制台，整个项目算是完成了创建/更新：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/125149790-9f959f80-e16d-11eb-8e3a-c5ba0b1f8ae6.png\" alt=\"image\"></p>\n<h2 id=\"%E6%80%BB%E7%BB%93\">总结 <a class=\"header-anchor\" href=\"#%E6%80%BB%E7%BB%93\">#</a></h2>\n<p>这个是一个典型的SAE+Github ACtion实现CD的案例。希望通过这样一个案例，可以帮助更多人学习和了解Serverless Devs，可以将其应用到自己的项目中。</p>\n",
  "link": "/zh-cn/blog/aliyun-sae-github-action-cicd.html",
  "meta": {
    "slug": "aliyun-sae-github-action-cicd",
    "title": "Serverless Devs - SAE与Github Action珠合璧联，让CD从未如此简单",
    "author": "Anycodes",
    "author_title": "Serverless Devs",
    "author_url": "https://github.com/anycodes",
    "author_image_url": "https://avatars.githubusercontent.com/u/21079031?v=4",
    "tags": "[命令行, Serverless, CICD, SAE]",
    "date": "2021-07-10"
  }
}