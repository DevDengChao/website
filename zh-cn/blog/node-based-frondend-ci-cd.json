{
  "filename": "node-based-frondend-ci-cd.md",
  "__html": "<h1 id=\"serverless-devs%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E4%BA%8Enode%E7%9A%84%E5%89%8D%E7%AB%AFcicd\">Serverless-Devs实践-基于Node的前端CICD <a class=\"header-anchor\" href=\"#serverless-devs%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E4%BA%8Enode%E7%9A%84%E5%89%8D%E7%AB%AFcicd\">#</a></h1>\n<p><a href=\"https://github.com/Serverless-Devs/Serverless-Devs/blob/master/readme_zh.md\">Serverless Devs</a>是一个开源开放的 Serverless 开发者平台，致力于为开发者提供强大的工具链体系。通过该平台，开发者可以一键体验多云 Serverless 产品，极速部署 Serverless 项目。本文介绍通过Serverless-Devs部署一个前端CICD系统。</p>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\">基本信息 <a class=\"header-anchor\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\">#</a></h2>\n<p>自动将前端项目托管至阿里云对象存储平台，无需服务器及额外运维操作，并实现CDN访问加速。</p>\n<p>方案架构：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsnk6k0ynqj30ik0cddgi.jpg\" alt=\"1 (1)\"></p>\n<h2 id=\"%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D\">开始之前 <a class=\"header-anchor\" href=\"#%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D\">#</a></h2>\n<h3 id=\"serverless-devs\">Serverless Devs <a class=\"header-anchor\" href=\"#serverless-devs\">#</a></h3>\n<p>如果您的开发环境没有Serverless Devs，请参考<a href=\"https://github.com/devsapp/fc/blob/main/docs/Getting-started/Install-tutorial.md\">Serverless Devs Install-tutorial</a>进行安装。</p>\n<h3 id=\"docker\">Docker <a class=\"header-anchor\" href=\"#docker\">#</a></h3>\n<p>本文档涉及本地调试，因此需要开发环境具有Docker，您可根据您开发平台的不同安装不同版本，可参考<a href=\"https://github.com/devsapp/fc/blob/main/docs/Getting-started/Install-tutorial.md\">Serverless Devs Install-tutorial</a>可选部分。</p>\n<h3 id=\"github\">Github <a class=\"header-anchor\" href=\"#github\">#</a></h3>\n<ul>\n<li>本文档基于Github进行实践，因此不保证在其他代码托管平台的可用性，您可以根据您具体使用的代码平台的webhook参数对本文代码进行修改。<strong>您需要准备一个前端项目以便进行下一步</strong>，本文准备了<a href=\"https://github.com/JasonLamv-t/serverless-cicd-example-vue\">serverless-cicd-example-vue</a>便于实践</li>\n<li>创建密钥对并绑定到github，可参考<a href=\"https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh\">使用 SSH 连接到 GitHub - GitHub Docs</a></li>\n</ul>\n<h2 id=\"%E9%85%8D%E7%BD%AE\">配置 <a class=\"header-anchor\" href=\"#%E9%85%8D%E7%BD%AE\">#</a></h2>\n<h3 id=\"ram%E8%B4%A6%E5%8F%B7\">RAM账号 <a class=\"header-anchor\" href=\"#ram%E8%B4%A6%E5%8F%B7\">#</a></h3>\n<p>前往<a href=\"https://ram.console.aliyun.com/users\">RAM 访问控制</a>创建一个子用户，赋予其对象存储服务权限「AliyunOSSFullAccess」及管理函数计算(FC)服务权限「AliyunFCFullAccess」并创建AccessKey。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsncse20oij30s30823z3.jpg\" alt=\"image-20210720133222847\"></p>\n<h3 id=\"%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1(oss)\">对象存储服务(OSS) <a class=\"header-anchor\" href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1(oss)\">#</a></h3>\n<p>前往<a href=\"https://oss.console.aliyun.com/overview\">OSS管理控制台</a>开通对象存储服务，并创建一个Bucket，Bucket名称为serverless-cicd，存储地域为华南1(深圳)，其他参数为默认值。<strong>您可以选择不同的地域及Bucket名称，但需要对代码进行相应修改</strong></p>\n<h3 id=\"%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1(fc)\">函数计算服务(FC) <a class=\"header-anchor\" href=\"#%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%8D%E5%8A%A1(fc)\">#</a></h3>\n<p>前往<a href=\"https://fc.console.aliyun.com/fc/overview/cn-shenzhen\">函数计算控制台</a>开通函数计算服务，请注意，函数计算服务分服务地域进行管理，您可能需要切换地域才能查看相应的服务及函数。</p>\n<h3 id=\"%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1(sls)\">日志服务(SLS) <a class=\"header-anchor\" href=\"#%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1(sls)\">#</a></h3>\n<p>前往<a href=\"https://sls.console.aliyun.com/lognext/profile\">日志服务</a>开通日志服务，并创建一个名为serverless-cicd-log的Project，创建成功后会提示是否创建logStore，我们选择确认。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsndh8gt29j30ap0bwwev.jpg\" alt=\"image-20210720135617456\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsndhen30aj308d05dt8n.jpg\" alt=\"image-20210720135627586\"></p>\n<p>logStore我们填写名称，其他保持默认。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsndj2z7npj30es0iyt9v.jpg\" alt=\"image-20210720135804507\"></p>\n<p>创建成功后会提示是否立即接入数据，我们选择取消。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsng4itwpij30aw04ut8n.jpg\" alt=\"image-20210720152752200\"></p>\n<h3 id=\"serverless-devs%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE\">Serverless-Devs密钥配置 <a class=\"header-anchor\" href=\"#serverless-devs%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE\">#</a></h3>\n<p>参考<a href=\"https://github.com/devsapp/fc/blob/main/docs/Getting-started/Setting-up-credentials.md\">配置阿里云密钥</a>及<a href=\"http://www.serverless-devs.com/docs/command#config%E6%8C%87%E4%BB%A4\">S config</a>，将前文添加的子用户AccessKey配置到S中。</p>\n<h2 id=\"serverless-devs%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E4%BA%8Enode%E7%9A%84%E5%89%8D%E7%AB%AFcicd-1\">Serverless-Devs实践-基于Node的前端CICD <a class=\"header-anchor\" href=\"#serverless-devs%E5%AE%9E%E8%B7%B5-%E5%9F%BA%E4%BA%8Enode%E7%9A%84%E5%89%8D%E7%AB%AFcicd-1\">#</a></h2>\n<h3 id=\"%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\">初始化项目 <a class=\"header-anchor\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\">#</a></h3>\n<p>执行<code>s init</code>来创建项目，我们选择<em>Alibaba Cloud Serverless ➡️ HTTP Function-Node.js 12 Example ➡️ 输入文件夹名称</em>。</p>\n<h3 id=\"%E4%BF%AE%E6%94%B9s.yaml\">修改s.yaml <a class=\"header-anchor\" href=\"#%E4%BF%AE%E6%94%B9s.yaml\">#</a></h3>\n<p>注意<code>双##</code>注释内容与项目生成配置文件的差异，主要有增加日志配置，修改超时时长以及修改http触发器合法请求方式：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">fc-deploy-test:</span> <span class=\"hljs-comment\">#  服务名称</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">devsapp/fc</span>  <span class=\"hljs-comment\"># 组件名称</span>\n    <span class=\"hljs-attr\">props:</span> <span class=\"hljs-comment\">#  组件的属性值</span>\n      <span class=\"hljs-attr\">region:</span> <span class=\"hljs-string\">cn-shenzhen</span>   <span class=\"hljs-comment\">## 此处可不修改</span>\n      <span class=\"hljs-attr\">service:</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">fc-deploy-cicd</span>\n        <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">'demo for fc-node-cicd component'</span>\n        <span class=\"hljs-attr\">internetAccess:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-comment\">## 增加日志配置</span>\n        <span class=\"hljs-attr\">logConfig:</span>\n          <span class=\"hljs-attr\">enableRequestMetrics:</span> <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-attr\">logstore:</span> <span class=\"hljs-string\">serverless-cicd-log</span>\n          <span class=\"hljs-attr\">project:</span> <span class=\"hljs-string\">serverless-cicd-log</span>\n      <span class=\"hljs-attr\">function:</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http-trigger-function</span>\n        <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">this</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">test</span>\n        <span class=\"hljs-attr\">runtime:</span> <span class=\"hljs-string\">nodejs12</span>\n        <span class=\"hljs-attr\">codeUri:</span> <span class=\"hljs-string\">./</span>\n        <span class=\"hljs-attr\">handler:</span> <span class=\"hljs-string\">index.handler</span>\n        <span class=\"hljs-attr\">memorySize:</span> <span class=\"hljs-number\">128</span>\n        <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">180</span>  <span class=\"hljs-comment\">## 增加时长，避免因为网络问题超时</span>\n      <span class=\"hljs-attr\">triggers:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">httpTrigger</span>\n          <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">http</span>\n          <span class=\"hljs-attr\">config:</span>\n            <span class=\"hljs-attr\">authType:</span> <span class=\"hljs-string\">anonymous</span>\n            <span class=\"hljs-attr\">methods:</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GET</span>\n              <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">POST</span>  <span class=\"hljs-comment\">## Github Webhook为POST方式</span>\n      <span class=\"hljs-attr\">customDomains:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">domainName:</span> <span class=\"hljs-string\">auto</span>\n          <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">HTTP</span>\n          <span class=\"hljs-attr\">routeConfigs:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/*</span>\n              <span class=\"hljs-attr\">methods:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GET</span>\n</code></pre>\n<h3 id=\"%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">安装依赖 <a class=\"header-anchor\" href=\"#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">#</a></h3>\n<p>通过执行<code>yarn add ali-oss</code>或<code>npm install -s ali-oss</code>安装阿里云OSS SDK</p>\n<h3 id=\"%E4%B8%8A%E4%BC%A0%E5%AF%86%E9%92%A5%E5%8F%8A%E8%84%9A%E6%9C%AC\">上传密钥及脚本 <a class=\"header-anchor\" href=\"#%E4%B8%8A%E4%BC%A0%E5%AF%86%E9%92%A5%E5%8F%8A%E8%84%9A%E6%9C%AC\">#</a></h3>\n<p>上传名「id_rsa」的私钥文件(绑定到Github 的SSH密钥)及名为「my_ssh_executable.sh」的脚本文件到对象存储桶根目录下</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> my_ssh_executable.sh</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">! /bin/sh</span>\nID_RSA=/tmp/id_rsa\nexec /usr/bin/ssh -o StrictHostKeyChecking=no -i $ID_RSA \"$@\"\n</code></pre>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsniupvuk3j30xf05sdgd.jpg\" alt=\"image-20210720170214542\"></p>\n<h3 id=\"%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81\">修改代码 <a class=\"header-anchor\" href=\"#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81\">#</a></h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">//index.js</span>\n<span class=\"hljs-keyword\">const</span> getRawBody = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'raw-body'</span>)\n<span class=\"hljs-keyword\">const</span> getFormBody = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body/form'</span>)\n<span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body'</span>)\n<span class=\"hljs-keyword\">const</span> execSync = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'child_process'</span>).execSync\n<span class=\"hljs-keyword\">const</span> oss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'ali-oss'</span>)\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n\nexports.handler = <span class=\"hljs-keyword\">async</span> (req, resp, context) =&gt; {\n  <span class=\"hljs-comment\">// 设置响应类型</span>\n  resp.setHeader(<span class=\"hljs-string\">'Content-type'</span>, <span class=\"hljs-string\">'application/json'</span>)\n\n  <span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> oss({\n    <span class=\"hljs-attr\">region</span>: <span class=\"hljs-string\">'oss-cn-shenzhen'</span>, <span class=\"hljs-comment\">// 根据实际设置填写</span>\n    <span class=\"hljs-attr\">accessKeyId</span>: <span class=\"hljs-string\">'&lt;Your accessKeyId&gt;'</span>,\n    <span class=\"hljs-attr\">accessKeySecret</span>: <span class=\"hljs-string\">'&lt;Your accessKeySecret&gt;'</span>,\n    <span class=\"hljs-attr\">bucket</span>: <span class=\"hljs-string\">'serverless-cicd'</span>\n  })\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">filename, localpath, cmd</span>) </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> client.get(filename, localpath)\n      <span class=\"hljs-keyword\">if</span> (res.res.status == <span class=\"hljs-number\">200</span>) execSync(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${cmd}</span> <span class=\"hljs-subst\">${localpath}</span>`</span>)\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-built_in\">console</span>.error(e)\n    }\n  }\n\t<span class=\"hljs-comment\">// 下载密钥及脚本</span>\n  <span class=\"hljs-keyword\">get</span>('id_rsa', '/tmp/id_rsa', 'chmod 0600')\n  <span class=\"hljs-keyword\">get</span>('my_ssh_executable.sh', '/tmp/my_ssh_executable.sh', 'chmod +x')\n\n  console.log('下载密钥和脚本完成')\n\t\n  // 获取webhook提交的推送信息\n  getRawBody(req, async function (err, body) {\n    body = body.toString().replace(<span class=\"hljs-string\">'undefined'</span>, <span class=\"hljs-string\">'\",'</span>)\n    body = <span class=\"hljs-built_in\">JSON</span>.parse(body)\n    <span class=\"hljs-keyword\">const</span> ref = body.ref\n    <span class=\"hljs-keyword\">const</span> ref_type = body.ref_type\n    <span class=\"hljs-keyword\">const</span> repository_name = body.repository.name\n    <span class=\"hljs-keyword\">const</span> clone_url = body.repository.clone_url\n\n    <span class=\"hljs-keyword\">if</span> (ref_type != <span class=\"hljs-string\">'tag'</span>) {\n      resp.send(<span class=\"hljs-string\">'No tag event'</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n\n    <span class=\"hljs-comment\">// 删除可能存在的代码，并重新克隆</span>\n    <span class=\"hljs-keyword\">if</span> (fs.existsSync(<span class=\"hljs-string\">`/tmp/<span class=\"hljs-subst\">${repository_name}</span>/`</span>)) execSync(<span class=\"hljs-string\">`rm -rf /tmp/<span class=\"hljs-subst\">${repository_name}</span>`</span>)\n    gitclone = <span class=\"hljs-string\">`GIT_SSH=\"/tmp/my_ssh_executable.sh\" git clone -b <span class=\"hljs-subst\">${ref}</span> <span class=\"hljs-subst\">${clone_url}</span> /tmp/<span class=\"hljs-subst\">${repository_name}</span>`</span>\n    <span class=\"hljs-keyword\">try</span> {\n      execSync(gitclone)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'克隆完成'</span>)\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      resp.send(<span class=\"hljs-string\">'git clone fail'</span>)\n    }\n    \n    <span class=\"hljs-comment\">// 执行自定义的打包脚本</span>\n    <span class=\"hljs-comment\">// execSync(`cd /tmp/${repository_name} &amp;&amp; sh build.sh`)</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFilesList</span>(<span class=\"hljs-params\">dir</span>) </span>{\n      <span class=\"hljs-keyword\">let</span> res = []\n      <span class=\"hljs-keyword\">let</span> files = fs.readdirSync(dir)\n      files.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">filename</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (filename[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'.'</span>) <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">let</span> filepath = path.join(dir, filename)\n        <span class=\"hljs-keyword\">let</span> info = fs.statSync(filepath)\n        <span class=\"hljs-keyword\">if</span> (info.isFile()) res.push({ filename, filepath })\n        <span class=\"hljs-keyword\">else</span> res = res.concat(getFilesList(filepath))\n      })\n      <span class=\"hljs-keyword\">return</span> res\n    }\n\n    <span class=\"hljs-comment\">// 获取文件列表</span>\n    <span class=\"hljs-keyword\">const</span> files = getFilesList(<span class=\"hljs-string\">`/tmp/<span class=\"hljs-subst\">${repository_name}</span>/`</span>)\n    <span class=\"hljs-comment\">// 遍历上传文件</span>\n    <span class=\"hljs-built_in\">Promise</span>.all(files.map(<span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-keyword\">async</span> (resolve) =&gt; {\n        <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> client.put(file.filepath.replace(<span class=\"hljs-string\">`/tmp`</span>, <span class=\"hljs-string\">``</span>), file.filepath)\n        resolve(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${file.filename}</span> uploading: <span class=\"hljs-subst\">${res.res.status == <span class=\"hljs-number\">200</span>}</span>`</span>)\n      })\n    })).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(r)\n      resp.send(<span class=\"hljs-built_in\">JSON</span>.stringify({\n        ref, ref_type, repository_name, clone_url\n      }))\n    }) \n  })\n}\n</code></pre>\n<h3 id=\"%E9%83%A8%E7%BD%B2\">部署 <a class=\"header-anchor\" href=\"#%E9%83%A8%E7%BD%B2\">#</a></h3>\n<p>执行<code>s deploy</code>一键部署，通过控制台可以查看到部署结果</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsnjfonhokj30s00a10tr.jpg\" alt=\"image-20210720172223703\"></p>\n<h3 id=\"%E9%85%8D%E7%BD%AEgithub\">配置GitHub <a class=\"header-anchor\" href=\"#%E9%85%8D%E7%BD%AEgithub\">#</a></h3>\n<p>进入GitHub前端仓库 ➡️ Settings ➡️ Webhooks：</p>\n<ul>\n<li>payload：触发器路径，可复制命令行输出或到控制台查看</li>\n<li>Content type：application/json</li>\n<li>events：仅勾选 ☑️ Branch or tag creation</li>\n</ul>\n<h3 id=\"%E8%A7%A6%E5%8F%91%E6%B5%8B%E8%AF%95\">触发测试 <a class=\"header-anchor\" href=\"#%E8%A7%A6%E5%8F%91%E6%B5%8B%E8%AF%95\">#</a></h3>\n<pre><code class=\"language-shell\">cd frontend-project-dir\ngit tag v1.0 -m 'new version'\ngit push origin tag v1.0\n</code></pre>\n<h3 id=\"%E8%BE%93%E5%87%BA\">输出 <a class=\"header-anchor\" href=\"#%E8%BE%93%E5%87%BA\">#</a></h3>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsnkxfcz71j30n50ebabh.jpg\" alt=\"image-20210720181402727\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gsnkxn8w92j30h606rdg2.jpg\" alt=\"image-20210720181415414\"></p>\n<h2 id=\"%E9%99%84%E5%BD%95%E4%B8%8E%E5%8F%82%E8%80%83\">附录与参考 <a class=\"header-anchor\" href=\"#%E9%99%84%E5%BD%95%E4%B8%8E%E5%8F%82%E8%80%83\">#</a></h2>\n<p><a href=\"https://github.com/JasonLamv-t/serverless-devs-node-based-cicd\">本文代码</a></p>\n<p><a href=\"https://bp.aliyun.com/detail/73?spm=a2c4g.11186623.2.8.2e8962b39fPYAm\">Function Compute搭建前端CICD系统-最佳实践-阿里云 (aliyun.com)</a></p>\n<p><a href=\"https://github.com/JasonLamv-t/serverless-cicd-example-vue\">前端项目示例</a></p>\n",
  "link": "/zh-cn/blog/node-based-frondend-ci-cd.html",
  "meta": {}
}