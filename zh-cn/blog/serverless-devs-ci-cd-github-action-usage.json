{
  "filename": "serverless-devs-ci-cd-github-action-usage.md",
  "__html": "<h1 id=\"%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87github-action%E4%BD%BF%E7%94%A8serverless-devs%E5%81%9Aci%2Fcd\">如何通过Github Action使用Serverless Devs做CI/CD <a class=\"header-anchor\" href=\"#%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87github-action%E4%BD%BF%E7%94%A8serverless-devs%E5%81%9Aci%2Fcd\">#</a></h1>\n<p>当我们在体验Serverless之后，欲将项目真真实实的部署到Serverless架构时，CI/CD是我们很多人绕不开的话题，那么基于Serverless Devs这款工具，如何快速的和Github Action进行有机结合，实现CI/CD的能力呢？</p>\n<h2 id=\"ci%2Fcd%E7%9A%84%E2%80%9C%E8%84%9A%E6%89%8B%E6%9E%B6%E2%80%9D\">CI/CD的“脚手架” <a class=\"header-anchor\" href=\"#ci%2Fcd%E7%9A%84%E2%80%9C%E8%84%9A%E6%89%8B%E6%9E%B6%E2%80%9D\">#</a></h2>\n<p>现在有很多的脚手架，但是Serverless CI/CD的脚手架应该还是少数的，而Serverless Devs为我们提供了一个CI/CD的脚手架，以Github Action为例，我们可以执行代码，快速在项目下初始化CI/CD模板。</p>\n<p>例如，当前我的项目结构：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/120759969-27bccf80-c546-11eb-9260-64724df2e5f5.png\" alt=\"image\"></p>\n<p>此时，我只需要告诉Serverless Devs，我要生成一个Github Action模板即可：</p>\n<pre><code>s cli cicd github\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/120760086-48852500-c546-11eb-9c38-66dbfd82e632.png\" alt=\"image\"></p>\n<p>我们可以看到，系统会在当前项目创建相对应的CI/CD模板：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/120760172-681c4d80-c546-11eb-9551-ba3e060e2947.png\" alt=\"image\"></p>\n<p>至此，我们完成了第一个步骤，初始化一个CI/CD的模板。</p>\n<h2 id=\"%E6%B5%81%E7%A8%8B%E9%85%8D%E7%BD%AE\">流程配置 <a class=\"header-anchor\" href=\"#%E6%B5%81%E7%A8%8B%E9%85%8D%E7%BD%AE\">#</a></h2>\n<h3 id=\"yml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\">Yml文件配置 <a class=\"header-anchor\" href=\"#yml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\">#</a></h3>\n<p>系统所为我们生成的模板文件实际上是一个非常简单的案例：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Serverless</span> <span class=\"hljs-string\">Devs</span> <span class=\"hljs-string\">Project</span> <span class=\"hljs-string\">CI/CD</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span> <span class=\"hljs-string\">[</span> <span class=\"hljs-string\">master</span> <span class=\"hljs-string\">]</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">serverless-devs-cd:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-number\">12</span>\n          <span class=\"hljs-attr\">registry-url:</span> <span class=\"hljs-string\">https://registry.npmjs.org/</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">-g</span> <span class=\"hljs-string\">@serverless-devs/s</span>\n      <span class=\"hljs-comment\"># 默认密钥配置指令是阿里云密钥配置指令，更多可以参考：</span>\n      <span class=\"hljs-comment\"># 如何通过Github Action使用Serverless Devs做CI/CD：http://short.devsapp.cn/cicd/github/action/usage</span>\n      <span class=\"hljs-comment\"># Serverless Devs的官网是通过Serverless Devs部署的: http://short.devsapp.cn/cicd/github/action/practice</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">add</span> <span class=\"hljs-string\">--AccountID</span> <span class=\"hljs-string\">${{secrets.AccountID}}</span> <span class=\"hljs-string\">--AccessKeyID</span> <span class=\"hljs-string\">${{secrets.AccessKeyID}}</span> <span class=\"hljs-string\">--AccessKeySecret</span> <span class=\"hljs-string\">${{secrets.AccessKeySecret}}</span> <span class=\"hljs-string\">-a</span> <span class=\"hljs-string\">default</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">deploy</span>\n</code></pre>\n<p>整个核心流程是：</p>\n<ol>\n<li>下载<code>serverless-devs</code></li>\n<li>配置密钥信息</li>\n<li>项目部署（执行<code>s deploy</code>命令）</li>\n</ol>\n<p>但是在实际生产过程中，我们可能需要自定义使用一些功能，此时可以参考Github Action的文档：<a href=\"https://docs.github.com/cn/actions\">https://docs.github.com/cn/actions</a></p>\n<p>例如，我在下载<code>serverless-devs</code>之后，配置密钥之后，我需要进行<code>build</code>等操作，操作之后，我在删除临时生成的文件夹&quot;./abc&quot;，此时我们可以：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-string\">...</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">-g</span> <span class=\"hljs-string\">@serverless-devs/s</span>\n      <span class=\"hljs-comment\"># 默认密钥配置指令是阿里云密钥配置指令，更多可以参考：</span>\n      <span class=\"hljs-comment\"># 如何通过Github Action使用Serverless Devs做CI/CD：http://short.devsapp.cn/cicd/github/action/usage</span>\n      <span class=\"hljs-comment\"># Serverless Devs的官网是通过Serverless Devs部署的: http://short.devsapp.cn/cicd/github/action/practice</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">add</span> <span class=\"hljs-string\">--AccountID</span> <span class=\"hljs-string\">${{secrets.AccountID}}</span> <span class=\"hljs-string\">--AccessKeyID</span> <span class=\"hljs-string\">${{secrets.AccessKeyID}}</span> <span class=\"hljs-string\">--AccessKeySecret</span> <span class=\"hljs-string\">${{secrets.AccessKeySecret}}</span> <span class=\"hljs-string\">-a</span> <span class=\"hljs-string\">default</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">build</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">rm</span> <span class=\"hljs-string\">-rf</span> <span class=\"hljs-string\">./abc</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">s</span> <span class=\"hljs-string\">deploy</span>\n</code></pre>\n<p>所以，具体的流程，我们完全可以根据需求自定义。</p>\n<h3 id=\"%E8%B4%A6%E5%8F%B7%E4%BF%A1%E6%81%AF%E9%85%8D%E7%BD%AE\">账号信息配置 <a class=\"header-anchor\" href=\"#%E8%B4%A6%E5%8F%B7%E4%BF%A1%E6%81%AF%E9%85%8D%E7%BD%AE\">#</a></h3>\n<p>在上一个流程中，我们涉及到密钥信息的配置，我们可以使用Serverless Devs为我们提供的<code>s config add</code>命令进行。</p>\n<p>例如，阿里云的账号体系需要<code>AccountID</code>,<code>AccessKeyID</code>,<code>AccessKeySecret</code>等内容，此时我们可以：</p>\n<ol>\n<li>将密钥信息配置到Github Secrets中</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/120761131-71f28080-c547-11eb-9bb8-e08dafabb4ee.png\" alt=\"image\"></p>\n<p>我们创建多对密钥信息：</p>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/120761249-93ec0300-c547-11eb-9c0d-904fb85b4201.png\" alt=\"image\"></p>\n<p>例如，我此处配置了三对密钥：</p>\n<ul>\n<li><code>ALIYUN_ACCOUNT_ID</code>对应阿里云密钥体系中的<code>AccountID</code>；</li>\n<li><code>ALIYUN_ACCESS_KEY_ID</code>对应阿里云密钥体系中的<code>AccessKeyID</code>；</li>\n<li><code>ALIYUN_ACCESS_KEY_SECRET</code>对应阿里云密钥体系中的<code>AccessKeySecret</code></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21079031/120761347-ae25e100-c547-11eb-9bcd-4fc742671bc5.png\" alt=\"image\"></p>\n<p>我此时则可以对应配置：</p>\n<pre><code>s config add --AccountID ${{secrets.ALIYUN_ACCOUNT_ID}} --AccessKeyID ${{secrets.ALIYUN_ACCESS_KEY_ID}} --AccessKeySecret ${{secrets.ALIYUN_ACCESS_KEY_SECRET}} -a website_access\n</code></pre>\n<p>当然，不同厂商可能需要不同的密钥信息配置，部分情况下厂商可能还需要配置临时密钥，此时可以通过<code>s config add -h</code>获取密钥配置的帮助文档：</p>\n<pre><code>jiangyu@ServerlessSecurity ~ % s config add -h\nUsage: s config add [commands] [name]\n\nYou can add an account\n\n    Example:\n        $ s config add\n        $ s config add --AccessKeyID ****** --AccessKeySecret ****** --AccountID ******\n        $ s config add --AccessKey ****** --SecretKey ******\n  \n    Configuration parameters for cloud vendors:\n        alibaba: AccountID, AccessKeyID, AccessKeySecret\n        aws: AccessKeyID, SecretAccessKey\n        baidu: AccessKeyID, SecretAccessKey\n        huawei: AccessKey, SecretKey\n        google: PrivateKeyData\n        tencent: AccountID, SecretID, SecretKey\n\n🧭 How to get the key: https://github.com/Serverless-Devs/docs/tree/master/zh/others/provider-config\n\nOptions:\n  --AccountID [AccountID]              AccountID of key information\n  --AccessKeyID [AccessKeyID]          AccessKeyID of key information\n  --AccessKeySecret [AccessKeySecret]  AccessKeySecret of key information\n  --SecretAccessKey [SecretAccessKey]  SecretAccessKey of key information\n  --AccessKey [AccessKey]              AccessKey of key information\n  --SecretKey [SecretKey]              SecretKey of key information\n  --SecretID [SecretID]                SecretID of key information\n  --PrivateKeyData [PrivateKeyData]    PrivateKeyData of key information\n  -kl , --keyList [keyList]            Keys of key information, like: -kl key1,key2,key3\n  -il , --infoList [infoList]          Values of key information, like: -kl info1,info2,info3\n  -a , --aliasName [name]              Key pair alias, if the alias is not set, use default instead\n  -h, --help                           Display help for command\n</code></pre>\n<blockquote>\n<p>如何配置自定义Key-Value的密钥，例如某个组件是我自己开发的，我需要配置一个Key为tempToken1，Value为tempValue1，和Key为tempToken2，Value为tempValue2，别名为demo的密钥对？\n此时可以通过参数<code>-kl , --keyList [keyList]</code>和<code>-il , --infoList [infoList]</code>自定义添加，例如：<code>s config add -kl tempToken1,tempToken2 -il tempValue1,tempValue2 -a demo</code>\n<img src=\"https://user-images.githubusercontent.com/21079031/120762289-adda1580-c548-11eb-9684-87767b6fe109.png\" alt=\"image\"></p>\n</blockquote>\n<blockquote>\n<p>密钥中的别名有什么？\n密钥中的别名，是为了帮助Serverless Devs更快的识别出你要用的密钥信息，主要是在Yaml中体现，例如：\n<img src=\"https://user-images.githubusercontent.com/21079031/120762524-eb3ea300-c548-11eb-83ec-73dabc2029c9.png\" alt=\"image\">\n在此处配置的密钥信息（默认是default），如果此处配置了密钥别名是&quot;default&quot;，那么系统就会在执行相关操作的时候，去获取名为&quot;default&quot;的密钥信息；</p>\n</blockquote>\n<blockquote>\n<p>我的一个应用中，涉及到部署到多个平台，需要多个密钥信息，如何配置？<br>\n例如，当存在项目：\n<img src=\"https://user-images.githubusercontent.com/21079031/120762886-45d7ff00-c549-11eb-8d01-743ad858d611.png\" alt=\"image\">\n此时，该app中涉及到两个Service，分别用了不同的组件以及不同的密钥内容<code>website_access</code>, <code>fc_access</code><br>\n我们可以通过配置多个密钥信息来进行CI/CD的配置</p>\n<ol>\n<li>在Github Secrets处配置对应的Key-Value</li>\n<li>在生成的<code>.github/workflow/serverless-devs.yml</code>文件中配置密钥信息：</li>\n</ol>\n<pre><code>s config add -kl tempToken1,tempToken2 -il tempValue1,tempValue2 -a website_access\ns config add -kl tempToken3,tempToken4 -il tempValue3,tempValue4 -a fc_access\n</code></pre>\n</blockquote>\n<h1 id=\"others\">Others <a class=\"header-anchor\" href=\"#others\">#</a></h1>\n<p>Best practices：</p>\n<ul>\n<li>🍉 Serverless Devs的官网是通过Serverless Devs部署的: <a href=\"http://short.devsapp.cn/cicd/github/action/practice\">http://short.devsapp.cn/cicd/github/action/practice</a></li>\n</ul>\n",
  "link": "/zh-cn/blog/serverless-devs-ci-cd-github-action-usage.html",
  "meta": {
    "slug": "serverless-devs-ci-cd-github-action-usage",
    "title": "如何通过Github Action使用Serverless Devs做CI/CD",
    "author": "Anycodes",
    "author_title": "Serverless Devs",
    "author_url": "https://github.com/anycodes",
    "author_image_url": "https://avatars.githubusercontent.com/u/21079031?v=4",
    "tags": "[命令行, Serverless, CI/CD]",
    "date": "2021-06-04"
  }
}