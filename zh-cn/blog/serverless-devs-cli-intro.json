{
  "filename": "serverless-devs-cli-intro.md",
  "__html": "<h1 id=\"%E9%80%8F%E8%BF%87%E6%8C%87%E4%BB%A4%E9%9B%86%E8%AE%BE%E8%AE%A1%E5%8E%BB%E7%9C%8Bserverless-devs-%E7%9A%84%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B\">透过指令集设计去看Serverless Devs 的扩展能力 <a class=\"header-anchor\" href=\"#%E9%80%8F%E8%BF%87%E6%8C%87%E4%BB%A4%E9%9B%86%E8%AE%BE%E8%AE%A1%E5%8E%BB%E7%9C%8Bserverless-devs-%E7%9A%84%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B\">#</a></h1>\n<h2 id=\"\"> <a class=\"header-anchor\" href=\"#\">#</a></h2>\n<p>希望通过本篇文章帮助你理解serverless devs 的指令集设计思想，并且希望你能够更好的使用serverless devs工具提升自己的开发生产力</p>\n<h2 id=\"%E9%9D%99%E6%80%81%E6%8C%87%E4%BB%A4%E5%92%8C%E5%8A%A8%E6%80%81%E6%8C%87%E4%BB%A4\">静态指令和动态指令 <a class=\"header-anchor\" href=\"#%E9%9D%99%E6%80%81%E6%8C%87%E4%BB%A4%E5%92%8C%E5%8A%A8%E6%80%81%E6%8C%87%E4%BB%A4\">#</a></h2>\n<p>目前serverless devs 开发者工具的静态指令集非常简单只有5个\n<img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2021/png/13970/1622787931570-6bc376df-e4bc-4a2c-a5c8-df1fabf4ea34.png#clientId=ue380b034-bff6-4&amp;from=paste&amp;height=95&amp;id=ub651dc36&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=190&amp;originWidth=1224&amp;originalType=binary&amp;size=97993&amp;status=done&amp;style=none&amp;taskId=u1f0500a8-c942-477f-bab7-c526c7ffec3&amp;width=612\" alt=\"image.png\"></p>\n<ul>\n<li>配置云商秘钥的【config】</li>\n<li>初始化应用/组件的 【init】</li>\n<li>以及无配置式执行指令的 【cli】</li>\n<li>数据源设置【set】</li>\n<li>以及可以用来支持 复杂指令执行的 【exec】</li>\n</ul>\n<p><strong>以上的静态指令集主要可以帮助新用户快速使用s工具，掌握s工具的基本能力。</strong>\n除了上面的静态指令，还有就是检测到有配置文件s.yaml会自动生成的动态指令，这些动态指令是根据具体执行组件的方法来确认的。举个例子，如果有一个配置文件如下，他包含了一个标准服务 <strong>component-demo</strong>,服务所关联的逻辑组件是<strong>s-demo</strong>。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">edition:</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span>        <span class=\"hljs-comment\">#  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">component-demo</span>   <span class=\"hljs-comment\">#  项目名称</span>\n<span class=\"hljs-attr\">vars:</span> <span class=\"hljs-comment\"># [全局变量，提供给各个服务使用]</span>\n  <span class=\"hljs-attr\">logo:</span> <span class=\"hljs-string\">https://image.aliyun.com/xxxx.png</span>\n  <span class=\"hljs-attr\">domain:</span> <span class=\"hljs-string\">xxxx.yyy.com</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">component-demo:</span> <span class=\"hljs-comment\">#  服务名称</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">s-demo</span>  <span class=\"hljs-comment\"># 这里引入的是相对路径，正式配置替换成你自己的component名称即可 </span>\n    <span class=\"hljs-attr\">props:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">${component-test2.props.name}</span>\n      <span class=\"hljs-attr\">otherInput:</span> <span class=\"hljs-string\">${component-test2.output.hello}</span>\n      <span class=\"hljs-attr\">envshow:</span> <span class=\"hljs-string\">${env(USER)}</span>\n</code></pre>\n<p>那么在这个配置文件的同目录下你去查看s 的输出指令,会发现新增了一个 component-demo的指令\n<img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2021/png/13970/1622788342218-1d4c86a6-e3f3-4679-af94-ea901f2c5a93.png#clientId=ue380b034-bff6-4&amp;from=paste&amp;height=234&amp;id=u5f9698c3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=468&amp;originWidth=1884&amp;originalType=binary&amp;size=242519&amp;status=done&amp;style=none&amp;taskId=u0e388f94-f32b-4d71-b766-1ac1a35f42c&amp;width=942\" alt=\"image.png\">\n然后你可以通过 <strong>s component-demo -h</strong> 查看其具体的使用方法\n<img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2021/png/13970/1622788811202-d8f7f7c7-400b-4809-a020-e64f1fca9da7.png#clientId=ue380b034-bff6-4&amp;from=paste&amp;height=121&amp;id=ud823ceee&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=242&amp;originWidth=1250&amp;originalType=binary&amp;size=227446&amp;status=done&amp;style=none&amp;taskId=u3304fd51-5125-4ebc-8f9d-1c7524f1c2d&amp;width=625\" alt=\"image.png\">\n实现的原理是输入了 <strong>s component-demo test</strong> 指令后s工具会去找到 component-demo 关联的 组件s-demo，然后对他进行实例化，再把配置文件中的props 参数以及 内置的秘钥信息参数统一传到  s-demo 的 test 方法中，并且会代为执行test 方法，并把该方法的结果进行格式化输出。<br/>\n这样的好处就是，s工具不关心具体的组件实现逻辑，只负责编排和解析，而把具体的执行逻辑交给组件也就是具体由开发者实现，从而极大的扩展了工具的能力范围。\n假设你的配置文件下有多个services</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">edition:</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span>        <span class=\"hljs-comment\">#  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">component-demo</span>   <span class=\"hljs-comment\">#  项目名称</span>\n<span class=\"hljs-attr\">vars:</span> <span class=\"hljs-comment\"># [全局变量，提供给各个服务使用]</span>\n  <span class=\"hljs-attr\">logo:</span> <span class=\"hljs-string\">https://image.aliyun.com/xxxx.png</span>\n  <span class=\"hljs-attr\">domain:</span> <span class=\"hljs-string\">xxxx.yyy.com</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">component-demo:</span> <span class=\"hljs-comment\">#  服务名称</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">s-demo</span>  <span class=\"hljs-comment\"># 这里引入的是相对路径，正式配置替换成你自己的component名称即可 </span>\n    <span class=\"hljs-attr\">props:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">s1</span>\n  <span class=\"hljs-attr\">component-demo2:</span> <span class=\"hljs-comment\">#  服务名称</span>\n    <span class=\"hljs-attr\">component:</span> <span class=\"hljs-string\">s-demo</span>  <span class=\"hljs-comment\"># 这里引入的是相对路径，正式配置替换成你自己的component名称即可 </span>\n    <span class=\"hljs-attr\">props:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">s2</span>\n</code></pre>\n<p>如果你不希望通过输入 s component-demo test  ， s component-demo2 test  这样一个一个的去执行，也可以通过 <strong>s test</strong> 去全量执行\n<img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2021/png/13970/1622789389445-666be5b2-16be-4e66-be87-4724942a87ca.png#clientId=ue380b034-bff6-4&amp;from=paste&amp;height=131&amp;id=u11561a55&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=262&amp;originWidth=2250&amp;originalType=binary&amp;size=438340&amp;status=done&amp;style=none&amp;taskId=u979ad809-adda-439f-9e84-5d3d665ad22&amp;width=1125\" alt=\"image.png\">\n系统会提示要执行的全量服务，并且会把最终结果做汇总，一起输出，这样的好处是简化了多服务并且之间有依赖关系的执行方式，<strong>是应用编排能力的具体实现</strong>。\n即使只有一个服务也可以 使用 s test，最起码输入的字符更少，更加节省时间。</p>\n<h2 id=\"cli---%E6%97%A0%E9%85%8D%E7%BD%AE%E6%89%A7%E8%A1%8C%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%87%E4%BB%A4\">cli - 无配置执行组件的指令 <a class=\"header-anchor\" href=\"#cli---%E6%97%A0%E9%85%8D%E7%BD%AE%E6%89%A7%E8%A1%8C%E7%BB%84%E4%BB%B6%E7%9A%84%E6%8C%87%E4%BB%A4\">#</a></h2>\n<h4 id=\"%E5%8D%95%E7%8B%AC%E6%8A%8A%E8%BF%99%E4%B8%AA%E6%8C%87%E4%BB%A4%E6%8B%BF%E5%87%BA%E6%9D%A5%E8%AF%B4%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E6%9C%AC%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E4%B8%BB%E8%A7%92%EF%BC%8C%E4%BD%93%E7%8E%B0serverless-devs-%E5%BC%BA%E5%A4%A7%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%E4%B9%8B%E4%B8%80%E3%80%82\">单独把这个指令拿出来说是因为他是本篇文章的主角，体现Serverless devs 强大扩展能力的关键点之一。 <a class=\"header-anchor\" href=\"#%E5%8D%95%E7%8B%AC%E6%8A%8A%E8%BF%99%E4%B8%AA%E6%8C%87%E4%BB%A4%E6%8B%BF%E5%87%BA%E6%9D%A5%E8%AF%B4%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E6%9C%AC%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E4%B8%BB%E8%A7%92%EF%BC%8C%E4%BD%93%E7%8E%B0serverless-devs-%E5%BC%BA%E5%A4%A7%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%E4%B9%8B%E4%B8%80%E3%80%82\">#</a></h4>\n<p>我们知道，随着一个工具支持的能力越来越多，他的使用复杂度也会越来越高，我们一直想在设计上做一个平衡，<strong>既能够让新用户快速上手，不让那些复杂的指令迷人眼，也能够支持老用户的进阶，满足他们更高层次的需求</strong>。\n配置式的指令执行方式固然有着他自己的强大和独到之处，但是相关的依赖也让很多自动化的流程变的更加的复杂，所以团队考虑再三决定推出无配置的指令集 <strong>s cli</strong>\n<img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2021/png/13970/1622790598634-d454a58b-6c12-46d7-99db-fac56ed6703a.png#clientId=ue380b034-bff6-4&amp;from=paste&amp;height=239&amp;id=u86c479ff&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=478&amp;originWidth=1768&amp;originalType=binary&amp;size=191300&amp;status=done&amp;style=none&amp;taskId=u888a7e42-b775-4ed9-9a66-ce503aa1794&amp;width=884\" alt=\"image.png\"></p>\n<p>实际上有了cli指令，我可以在数小时或半天之内扩展一个新的功能点，并且对用户而言无需更新他们的工具集，即可使用我开发的功能。</p>\n<h3 id=\"%E7%9C%9F%E5%AE%9E%E7%BB%84%E4%BB%B6%E4%BE%8B%E5%AD%90\">真实组件例子 <a class=\"header-anchor\" href=\"#%E7%9C%9F%E5%AE%9E%E7%BB%84%E4%BB%B6%E4%BE%8B%E5%AD%90\">#</a></h3>\n<h4 id=\"platform---%E7%99%BB%E5%BD%95%EF%BC%8C%E6%B3%A8%E5%86%8C%EF%BC%8C%E5%8F%91%E5%B8%83\">platform - 登录，注册，发布 <a class=\"header-anchor\" href=\"#platform---%E7%99%BB%E5%BD%95%EF%BC%8C%E6%B3%A8%E5%86%8C%EF%BC%8C%E5%8F%91%E5%B8%83\">#</a></h4>\n<p>拿 platform 组件举例子来说，platform 组件是为了方便开发者贡献用用或者组件，快速发布到我们的serverless hub上，从开发测试到发布使用只用了半天不到。\n已经安装好s工具的开发者不需要做任何的升级改变，就可以\n通过 s cli platform register 注册 serverless hub账号;\n以及 s cli platform login 登录 serverless hub;\n然后再通过s cli platform publish 发布已经写好的应用/组件。</p>\n<h4 id=\"init---%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96s%E9%85%8D%E7%BD%AE%EF%BC%8C-cicd%E9%85%8D%E7%BD%AE%EF%BC%8C-api-%E9%85%8D%E7%BD%AE\">init - 已有项目初始化s配置， cicd配置， api 配置 <a class=\"header-anchor\" href=\"#init---%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96s%E9%85%8D%E7%BD%AE%EF%BC%8C-cicd%E9%85%8D%E7%BD%AE%EF%BC%8C-api-%E9%85%8D%E7%BD%AE\">#</a></h4>\n<p>再比如当前我们的 s init 只能针对新项目初始化配置，对于已有项目，例如我已经有一个使用create-react-app开发的前端项目，想把他部署到 云服务上。是没有办法处理的，这时如果通过修正代码，增加逻辑分支支持固然也可以应对这种需求，但这必须要求我修改核心功能并且进行一次发布，然后让开发者用户更新他们的命令行工具。一方面流程变得很长，并且存在变动导致的功能异常风险，另外一方面在整个用户体验上也不够友好，如果功能不停的增加意味着开发者用户要不停的升级。<br/>\n我采取的方案是通过cli 组件扩展</p>\n<ul>\n<li>1.使用 s init 初始化一个组件模板，命名为 init ，</li>\n<li>2.然后开发初始化逻辑，比如对已有项目初始化配置文件，支持添加cicd配置文件，添加api文件等</li>\n<li>3.使用 s cli platform publish（其实已经内置到组件模板的npm publish指令了，可以直接使用npm run publish） 发布到应用市场。</li>\n</ul>\n<p>之后其他的开发者就能够使用这个组件 ，通过 s cli init 引导式的初始化配置，并且 使用s deploy将自己的静态站点发布，整个过程行云流水，效率奇高，并且核心模块完全不受影响，完全不用担心影响到其他的功能使用</p>\n<h4 id=\"%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BB%84%E4%BB%B6%E8%AF%B7%E6%88%B3%E8%BF%99%E9%87%8C\">关于如何快速开发自己的组件<a href=\"https://github.com/Serverless-Devs/Serverless-Devs/discussions/62\">请戳这里</a> <a class=\"header-anchor\" href=\"#%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BB%84%E4%BB%B6%E8%AF%B7%E6%88%B3%E8%BF%99%E9%87%8C\">#</a></h4>\n<h2 id=\"%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%89%A9%E5%B1%95\">未来的扩展 <a class=\"header-anchor\" href=\"#%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%89%A9%E5%B1%95\">#</a></h2>\n<p>除了platform,init 这些官方的能力，我们也欢迎更加优秀的场景方案透出到指令设计上。这边我可以把场景大家分享一下，具体实现可以交给大家</p>\n<h3 id=\"%E5%9C%BA%E6%99%AF1\">场景1 <a class=\"header-anchor\" href=\"#%E5%9C%BA%E6%99%AF1\">#</a></h3>\n<p>企业内部系统自动化流程构建， 比如我们提交代码，触发集成测试，然后继续构建部署Serverless服务到指定的云商，最后把部署结果通过钉钉等IM 端通知到开发者。\n这个时候你可以在自己的CI，CD 服务器上部署 s 工具，然后开发 对应的组件，在执行脚本里面通过 s cli &lt;自定义组件&gt; &lt;自定义方法&gt; 处理流程，最终完成这个流程\n​</p>\n<h3 id=\"%E5%9C%BA%E6%99%AF2\">场景2 <a class=\"header-anchor\" href=\"#%E5%9C%BA%E6%99%AF2\">#</a></h3>\n<p>企业内容serverless 开发脚手架初始化 ，通过包装s 工具完成内部常用开发工程的选择，初始化配置 ，部署测试等工作。 比如你经常做中后台开发， 可以为内部其他开发同学提供多个主题选择，将s工具用于部署和调试阶段会减少对这方面的开发量\n​</p>\n<p><strong>其他更多的场景取决于你的想象力。</strong></p>\n<h2 id=\"%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\">写在最后 <a class=\"header-anchor\" href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\">#</a></h2>\n<p>我们最近一直在思考，工具最终要做成什么样子，最后觉得是能够帮助到更多的开发者，让他们享受serverless红利，或者优化自己的工作流都是好的，当然这个过程离不开广大开发者的支持，我们也希望不仅仅是我们自己在主导这个项目，希望更多的人参与进来加入社区，通过社区去主导他，只有集众所长，才有能把serverless devs 建设的更好。\n社区也正在招募优秀开发，欢迎你的加入， 提pr，提issue，点star 都可以。</p>\n<p>项目地址 <a href=\"https://github.com/Serverless-Devs/Serverless-Devs\">https://github.com/Serverless-Devs/Serverless-Devs</a></p>\n<p>​</p>\n",
  "link": "/zh-cn/blog/serverless-devs-cli-intro.html",
  "meta": {
    "slug": "serverless-devs-cli-intro",
    "title": "透过指令集设计去看Serverless Devs 的扩展能力",
    "author": "hanxie-crypto",
    "author_title": "Serverless Devs",
    "author_url": "https://github.com/hanxie-crypto",
    "author_image_url": "https://avatars.githubusercontent.com/u/4457084?v=4",
    "tags": "[命令行, Serverless, Cloudshell]",
    "date": "2021-06-04"
  }
}